Here is the prompt for Replit, written to be clear, easy to understand, and focused on adding "incredible" elements on top of your existing UI.

---

### **Replit Project Prompt: UPGRADE - "Futuristic UI Polish"**

**Your Role:** You are a UI/UX specialist and frontend developer. Our hackathon team already has the core UI prototype (`Smart Intake`, `Verification Dashboard`, `Report Page`). Your mission is to add a layer of high-impact, futuristic polish that makes the app look "incredible" and "intelligent."

**The Goal:** Add 3 specific "wow factor" elements on top of the existing components. These must be fast to implement using **React + Tailwind CSS** (and **Framer Motion** for animation).

---

### **1. Element to Add: The "Dynamic AI Brain" Background**

**What it is:** A subtle, animated background that visually reacts to the AI's status (idle, thinking, success).

**How to Implement:**
* **Idle State (Screen 1):** Use a *very subtle* animated particle or mesh gradient background (like `react-tsparticles` or a simple CSS gradient animation). It should be minimalistic, not distracting.
* **"Thinking" State (When "Analyze" is clicked):** Make the animation in the background speed up. The particles or mesh should "flow" faster, giving the impression that the AI is "processing."
* **"Success" State (When "Verification" loads):** The background animation resolves into a calm, stable, brighter state.

**Why it's "Incredible":** It makes the whole app feel like a single, intelligent organism.

**Replit Prompt:**
> "Add an animated, full-screen background using `react-tsparticles` or a similar lightweight library. The animation speed must be controlled by the app's 'state.' Create a 'thinking' state where the particles move faster, and an 'idle' state where they are slow."

---

### **2. Element to Add: The "Command Palette" Menu**

**What it is:** A futuristic, fast way to navigate, replacing a boring navbar. It's what modern dev tools (like VS Code) and productivity apps (like Linear) use.

**How to Implement:**
* **Trigger:** Add a single, clean "Menu" button or just a keyboard shortcut (like `Cmd+K` or `Ctrl+K`).
* **UI:** When triggered, a sleek, centered modal (a "Command Palette") appears.
* **Actions:** The lawyer can type or click commands:
    * `Start New Case`
    * `View Saved Reports`
    * `Print Current Report`
    * `Help / Contact`

**Why it's "Incredible":** It's extremely modern, clean, and "pro-user." It shows we're building a tool for high-speed professionals.

**Replit Prompt:**
> "Integrate a command palette library like **`cmdk`** or **`kbar`**. Remove the old navbar. The palette should pop up when a 'Menu' icon is clicked and should contain actions like 'Start New Case' and 'Print Report'."

---

### **3. Element to Add: The "Data Stream" Loading Animation**

**What it is:** Instead of a boring spinner, we visualize the "research" the AI is doing.

**How to Implement:**
* **Trigger:** When the lawyer hits "Generate Provisional Rights Report" on Screen 2.
* **UI:** Show a loading overlay. Instead of a spinner, display a *stream of rapidly changing, blurred text* that looks like legal jargon flying by.
* **Text:** You can use a simple array of legal-sounding keywords:
    * `[Analyzing Swiss Asylum Act...]`
    * `[Cross-referencing EU Dublin III Regulation...]`
    * `[Parsing Medical Ordinance 4.2...]`
    * `[Translating German -> English...]`
    * `[Compiling citations...]`

**Why it's "Incredible":** It *shows* the user the "8 hours of work" that the AI is doing in 8 seconds. It builds perceived value and looks technically impressive, even though it's a simple animation.

**Replit Prompt:**
> "Create a 'Loading' component for when the final report is being generated. Instead of a spinner, use JavaScript to cycle through an array of strings (e.g., 'Analyzing...', 'Translating...', 'Citing...') and display them rapidly on the screen to simulate a 'data stream' or 'AI thinking' process."